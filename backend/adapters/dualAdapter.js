// adapters/dualAdapter.js
// üîÑ DualAdapter ‚Äî –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–º–µ—Ç–∫–∞–º–∏.
// –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ ‚Äî –ª–æ–∫–∞–ª—å–Ω–∞—è SQLite (–±—ã—Å—Ç—Ä–∞—è —Ä–∞–±–æ—Ç–∞ + –æ—Ñ—Ñ–ª–∞–π–Ω).
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º –∫–æ–ø–∏—é –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª–∞—Ö (FileAdapter).
// –ï—Å–ª–∏ Firestore –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–∞–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω) ‚Äî –≤–∫–ª—é—á–∞–µ—Ç—Å—è –æ–±–ª–∞—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è.

import * as SqliteAdapter from './sqliteAdapter.js';
import * as FileAdapter from './fileAdapter.js';
import admin from 'firebase-admin';

// =============================
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Firestore.
// –ï—Å–ª–∏ admin –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null.
// =============================
function getFirestoreSafe() {
  try {
    return admin.firestore();
  } catch (e) {
    return null;
  }
}

// =============================
// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–º–µ—Ç–æ–∫ (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞).
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–∫ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î, —Ç–∞–∫ –∏ –ø–æ Firestore.
// =============================
function matchesFilters(note, filters = {}) {
  if (!filters.includeDeleted && note.isDeleted) return false;
  if (filters.uid && note.uid !== filters.uid) return false;

  if (filters.q) {
    const q = String(filters.q).toLowerCase();
    if (
      !(
        ((note.title || '').toLowerCase().includes(q)) ||
        ((note.body || '').toLowerCase().includes(q))
      )
    ) return false;
  }

  if (filters.updatedAfter && Number(note.updatedAt || 0) <= Number(filters.updatedAfter)) return false;
  if (filters.dateFrom && !(note.date && Number(note.date) >= Number(filters.dateFrom))) return false;
  if (filters.dateTo && !(note.date && Number(note.date) <= Number(filters.dateTo))) return false;
  if (filters.time && note.time !== filters.time) return false;

  if (Array.isArray(filters.tags) && filters.tags.length) {
    if (!Array.isArray(note.tags)) return false;
    for (const t of filters.tags) {
      if (!note.tags.includes(t)) return false;
    }
  }
  return true;
}

// =============================
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–∞–ø—Ç–µ—Ä–∞.
// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SQLite –∏ —Ñ–∞–π–ª–æ–≤—ã–π –∞–¥–∞–ø—Ç–µ—Ä.
// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Firestore.
// =============================
export async function init(basePath) {
  await SqliteAdapter.init(basePath);
  await FileAdapter.init(basePath);

  const firestore = getFirestoreSafe();
  if (firestore) {
    console.log('[DualAdapter] Firestore –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –æ–±–ª–∞—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞');
  } else {
    console.log('[DualAdapter] Firestore –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ');
  }
}

// =============================
// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ id.
// 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π SQLite.
// 2. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –∏–∑ Firestore.
// 3. –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≤ Firestore ‚Äî –∫–µ—à–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ (SQLite + File).
// =============================
export async function get(id) {
  const local = await SqliteAdapter.get(id);
  if (local) return local;

  const firestore = getFirestoreSafe();
  if (!firestore) return null;

  try {
    const snap = await firestore.collection('notes').doc(id).get();
    if (!snap.exists) return null;

    const note = snap.data();
    // –ö–µ—à–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫—É –ª–æ–∫–∞–ª—å–Ω–æ
    try {
      await SqliteAdapter.upsert(note);
      await FileAdapter.upsert(note);
      console.log(`[DualAdapter] –ó–∞–º–µ—Ç–∫–∞ ${id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ Firestore –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ`);
    } catch (e) {
      console.warn(`[DualAdapter] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ ${id} –ª–æ–∫–∞–ª—å–Ω–æ:`, e && e.message);
    }
    return note;
  } catch (e) {
    console.error('[DualAdapter][get] –û—à–∏–±–∫–∞ Firestore:', e && e.message);
    return null;
  }
}

// =============================
// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ (upsert).
// 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SQLite –∏ —Ñ–∞–π–ª—ã.
// 2. –ï—Å–ª–∏ Firestore –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –ø—É—à–∏–º —Ç—É–¥–∞.
// =============================
export async function upsert(note) {
  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
  await Promise.all([
    SqliteAdapter.upsert(note),
    FileAdapter.upsert(note)
  ]);

  const firestore = getFirestoreSafe();
  if (!firestore) {
    console.log(`[DualAdapter] Firestore –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –∑–∞–º–µ—Ç–∫–∞ ${note.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ`);
    return;
  }

  try {
    // –í Firestore –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ª–∏—á–∏–µ uid (–ø—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
    await firestore.collection('notes').doc(note.id).set(note, { merge: true });
    console.log(`[DualAdapter] –ó–∞–º–µ—Ç–∫–∞ ${note.id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Firestore`);
  } catch (e) {
    console.error(`[DualAdapter] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ ${note.id} –≤ Firestore:`, e && e.message);
  }
}

// =============================
// –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º.
// 1. –î–æ—Å—Ç–∞—ë–º –∏–∑ SQLite (–±—ã—Å—Ç—Ä–æ, –æ—Ñ—Ñ–ª–∞–π–Ω).
// 2. –ï—Å–ª–∏ Firestore –¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –æ—Ç—Ç—É–¥–∞ (–ø–æ uid).
// 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç).
// 4. –ù–æ–≤—ã–µ –∏–∑ Firestore ‚Äî –∫–µ—à–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ.
// =============================
export async function find(filters = {}) {
  // –õ–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
  const localNotes = await SqliteAdapter.find(filters);

  const firestore = getFirestoreSafe();
  if (!firestore) {
    return localNotes;
  }

  try {
    let q = firestore.collection('notes');
    if (filters.uid) q = q.where('uid', '==', filters.uid);

    const snap = await q.get();
    const remoteNotes = snap.docs.map(d => d.data());

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (—á—Ç–æ–±—ã –Ω–µ —É—Å–ª–æ–∂–Ω—è—Ç—å Firestore-–∑–∞–ø—Ä–æ—Å)
    const filteredRemote = remoteNotes.filter(n => matchesFilters(n, filters));

    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫
    const mapLocal = new Set(localNotes.map(n => n.id));
    const merged = [...localNotes];

    for (const rn of filteredRemote) {
      if (!mapLocal.has(rn.id)) {
        merged.push(rn);
        // –ö–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ Firestore
        try {
          await SqliteAdapter.upsert(rn);
          await FileAdapter.upsert(rn);
          console.log(`[DualAdapter] –ó–∞–º–µ—Ç–∫–∞ ${rn.id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ Firestore –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ`);
        } catch (e) {
          console.warn(`[DualAdapter] –û—à–∏–±–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ ${rn.id} –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞:`, e && e.message);
        }
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    merged.sort((a, b) => (b.updatedAt || 0) - (a.updatedAt || 0));
    return merged;
  } catch (e) {
    console.error('[DualAdapter] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–æ–∫ –∏–∑ Firestore:', e && e.message);
    return localNotes;
  }
}
