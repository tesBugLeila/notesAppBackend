// adapters/fileAdapter.js
// üìÇ FileAdapter ‚Äî —Ñ–∞–π–ª–æ–≤—ã–π –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∑–∞–º–µ—Ç–æ–∫.
// –ö–∞–∂–¥–∞—è –∑–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π JSON-—Ñ–∞–π–ª.
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ–π —Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ).
// –û—Å–Ω–æ–≤–Ω–∞—è –ë–î ‚Äî SQLite, –Ω–æ —Ñ–∞–π–ª—ã –ø–æ–º–æ–≥–∞—é—Ç –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.

import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

let DATA_DIR = null;

// =============================
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞.
// –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é "notes_files" –≤–Ω—É—Ç—Ä–∏ basePath.
// =============================
export async function init(basePath) {
  DATA_DIR = path.join(basePath, 'notes_files');
  await fs.mkdir(DATA_DIR, { recursive: true });
  console.log(`[FileAdapter] –ü–∞–ø–∫–∞ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: ${DATA_DIR}`);
}

// =============================
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∑–∞–º–µ—Ç–∫–∏ –ø–æ –µ—ë id.
// =============================
const filePathFor = (id) => path.join(DATA_DIR, `${id}.json`);

// =============================
// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ id.
// –ß–∏—Ç–∞–µ–º JSON-—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç.
// –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null.
// =============================
export async function get(id) {
  try {
    const txt = await fs.readFile(filePathFor(id), 'utf8');
    return JSON.parse(txt);
  } catch (e) {
    console.warn(`[FileAdapter] –ó–∞–º–µ—Ç–∫–∞ ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–æ–≤–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ`);
    return null;
  }
}

// =============================
// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏.
// –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º JSON-—Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é.
// =============================
export async function upsert(note) {
  try {
    await fs.writeFile(
      filePathFor(note.id),
      JSON.stringify(note, null, 2),
      'utf8'
    );
    console.log(`[FileAdapter] –ó–∞–º–µ—Ç–∫–∞ ${note.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª`);
  } catch (e) {
    console.error(`[FileAdapter] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ ${note.id}:`, e && e.message);
  }
}

// =============================
// –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π.
// 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ JSON-—Ñ–∞–π–ª—ã.
// 2. –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã (—É–¥–∞–ª—ë–Ω–Ω—ã–µ, uid, —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫, –¥–∞—Ç—ã, —Ç–µ–≥–∏).
// 3. –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ updatedAt (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ).
// =============================
export async function find(filters = {}) {
  filters = filters || {};
  const files = await fs.readdir(DATA_DIR);
  const notes = [];

  for (const f of files) {
    if (!f.endsWith('.json')) continue;
    try {
      const txt = await fs.readFile(path.join(DATA_DIR, f), 'utf8');
      const note = JSON.parse(txt);
      notes.push(note);
    } catch (e) {
      console.warn(`[FileAdapter] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${f}:`, e && e.message);
    }
  }

  // –ë–∞–∑–æ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  let result = notes.filter(n => filters.includeDeleted ? true : !n.isDeleted);

  // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (uid)
  if (filters.uid) {
    result = result.filter(n => n.uid === filters.uid);
  }

  // –ü–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –ø–æ title/body
  if (filters.q) {
    const q = String(filters.q).toLowerCase();
    result = result.filter(
      n => (n.title || '').toLowerCase().includes(q) ||
           (n.body || '').toLowerCase().includes(q)
    );
  }

  // –§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–∞–º
  if (filters.updatedAfter) result = result.filter(n => (n.updatedAt || 0) > filters.updatedAfter);
  if (filters.dateFrom) result = result.filter(n => n.date && n.date >= filters.dateFrom);
  if (filters.dateTo) result = result.filter(n => n.date && n.date <= filters.dateTo);

  // –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  if (filters.time) result = result.filter(n => n.time === filters.time);

  // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–≥–∞–º
  if (Array.isArray(filters.tags) && filters.tags.length) {
    result = result.filter(n => Array.isArray(n.tags) && filters.tags.every(t => n.tags.includes(t)));
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ updatedAt (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
  result.sort((a, b) => (b.updatedAt || 0) - (a.updatedAt || 0));

  console.log(`[FileAdapter] –ù–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${result.length}`);
  return result;
}

// =============================
// –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–º–µ—Ç–∫–∏.
// (–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–¥–∫–æ, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å soft-delete).
// =============================
export async function deleteFile(id) {
  try {
    await fs.unlink(filePathFor(id));
    console.log(`[FileAdapter] –ó–∞–º–µ—Ç–∫–∞ ${id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞`);
  } catch (e) {
    if (e.code !== 'ENOENT') {
      console.error(`[FileAdapter] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∑–∞–º–µ—Ç–∫–∏ ${id}:`, e && e.message);
      throw e;
    }
  }
}
