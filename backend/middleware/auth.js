// middleware/auth.js
// ==================
// Middleware –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Firebase ID token.
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Firebase Admin SDK:
//   - admin.auth().verifyIdToken(token)
//   - —Ä–µ–∑—É–ª—å—Ç–∞—Ç = { uid, email, ...claims }
//
// –ó–∞–¥–∞—á–∏:
//   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏—Å–ª–∞–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization: Bearer <idToken>.
//   2. –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Firebase Admin.
//   3. –ü—Ä–∏ —É—Å–ø–µ—Ö–µ ‚Üí –¥–æ–±–∞–≤–∏—Ç—å req.user (uid/email).
//   4. –ï—Å–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω ‚Üí –≤–µ—Ä–Ω—É—Ç—å 401 Unauthorized.

import admin from 'firebase-admin';

/**
 * authMiddleware
 * -------------------------------
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   app.use('/api/secure', authMiddleware, secureRouter);
 *
 * –ü–æ—Å–ª–µ middleware:
 *   - req.user.uid ‚Üí —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä Firebase –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *   - req.user.email ‚Üí email (–µ—Å–ª–∏ –µ—Å—Ç—å)
 *
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 *   - –ü–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –∑–∞–ø—Ä–æ—Å–æ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–±—è–∑–∞–Ω –≤—ã–∑—ã–≤–∞—Ç—å
 *     firebase.auth().currentUser.getIdToken()
 *     –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è—Ç—å –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫:
 *     Authorization: Bearer <idToken>
 */
export async function authMiddleware(req, res, next) {
  // –î–æ—Å—Ç–∞—ë–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
  const header = req.headers['authorization'] || req.headers['Authorization'];
  if (!header) {
    return res.status(401).json({
      error: 'unauthorized',
      reason: 'no_authorization_header'
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç: "Bearer <token>"
  const parts = header.split(' ');
  if (parts.length !== 2 || parts[0].toLowerCase() !== 'bearer') {
    return res.status(401).json({
      error: 'unauthorized',
      reason: 'bad_authorization_format'
    });
  }

  const token = parts[1];

  try {
    // üîë Firebase Admin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç payload:
    //   { uid: "...", email: "...", auth_time: ..., exp: ... }
    const decoded = await admin.auth().verifyIdToken(token);

    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º uid/email –∏ –ø—Ä–æ—á–∏–µ claims –≤ req.user
    req.user = decoded;

    // –∏–¥—ë–º –¥–∞–ª—å—à–µ (–∫ —Ç–≤–æ–∏–º —Ä–æ—É—Ç–∞–º /sync, /notes –∏ —Ç.–¥.)
    next();
  } catch (err) {
    console.error('[Auth] Token verification failed:', err && err.message);
    return res.status(401).json({ error: 'invalid_token' });
  }
}
